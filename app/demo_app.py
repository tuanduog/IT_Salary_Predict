import streamlit as st
import pandas as pd
import joblib
import sys
from pathlib import Path

# Th√™m th∆∞ m·ª•c g·ªëc v√†o PYTHONPATH
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

from src.preprocess import encode_features

# --- C·∫§U H√åNH TRANG ---
st.set_page_config(page_title="D·ª± b√°o l∆∞∆°ng IT", layout="centered")
st.title("PH√ÇN T√çCH D·ª∞ B√ÅO M·ª®C L∆Ø∆†NG NG√ÄNH IT")
st.markdown("""*S·ª≠ d·ª•ng m√¥ h√¨nh H·ªìi quy Tuy·∫øn t√≠nh*""")

# --- LOAD MODEL ---
@st.cache_resource
def load_model():
    try:
        model = joblib.load('notebook/model.pkl')
        encoder = joblib.load('notebook/encoder.pkl')
        return model, encoder
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i model: {str(e)}")
        return None, None

model, encoder = load_model()

# --- USE CASE 1: NH·∫¨P D·ªÆ LI·ªÜU ---
with st.form(key="salary_prediction_form"):
    st.subheader("1. Nh·∫≠p th√¥ng tin d·ª± b√°o")

    col1, col2 = st.columns(2)

    with col1:
        work_year = st.number_input(
            "NƒÉm l√†m vi·ªác*",
            min_value=2020,
            max_value=2025,
            value=2024,
            key="work_year_input"
        )
        remote_ratio = st.selectbox(
            "T·ª∑ l·ªá l√†m vi·ªác t·ª´ xa*",
            options=["0", "50", "100"],
            index=1,
            key="remote_ratio_select"
        )

    with col2:
        experience_level = st.selectbox(
            "Tr√¨nh ƒë·ªô kinh nghi·ªám*",
            options=["EN", "MI", "SE", "EX"],
            index=2,
            key="experience_level_select"
        )
        employment_type = st.selectbox(
            "Lo·∫°i h√¨nh l√†m vi·ªác*",
            options=["FT", "PT", "CT", "FL"],
            key="employment_type_select"
        )

    company_size = st.selectbox(
        "K√≠ch th∆∞·ªõc c√¥ng ty*",
        options=["S", "M", "L"],
        index=1,
        key="company_size_select"
    )

    company_location = st.selectbox(
        "V·ªã tr√≠ c√¥ng ty*",
        options=["US", "GB", "IN", "CA", "DE", "FR", "VN", "JP", "AU"],
        index=0,
        key="company_location_select"
    )

    employee_residence = st.selectbox(
        "Qu·ªëc gia c∆∞ tr√∫*",
        options=["US", "GB", "IN", "CA", "DE", "FR", "VN", "JP", "AU"],
        index=0,
        key="employee_residence_select"
    )

    job_title = st.selectbox(
        "Ch·ª©c danh c√¥ng vi·ªác*",
        options=["Data Engineer", "Data Scientist", "Machine Learning Engineer", "Data Analyst", "Data Architect"],
        index=0,
        key="job_title_select"
    )

    # --- N√öT SUBMIT ---
    submitted = st.form_submit_button("D·ª∞ B√ÅO L∆Ø∆†NG", type="primary")
    reset = st.form_submit_button("L√ÄM M·ªöI")

# --- X·ª¨ L√ù USE CASE 2: L√ÄM M·ªöI ---
if reset:
    st.rerun()

# --- X·ª¨ L√ù USE CASE 3: D·ª∞ B√ÅO ---
if submitted and model is not None:
    input_data = pd.DataFrame({
        'work_year': [work_year],
        'experience_level': [experience_level],
        'employment_type': [employment_type],
        'job_title': [job_title],
        'employee_residence': [employee_residence],
        'remote_ratio': [remote_ratio],
        'company_location': [company_location],
        'company_size': [company_size]
    })

    try:
        X, _ = encode_features(input_data, encoder, fit_encoder=False)
        prediction = model.predict(X)[0]
        predicted_salary = round(prediction)

        st.success("D·ª∞ B√ÅO TH√ÄNH C√îNG!")
        st.metric(
            label="**M·ª©c l∆∞∆°ng d·ª± ƒëo√°n (USD/nƒÉm)**",
            value=f"${predicted_salary:,}",
            delta="K·∫øt qu·∫£ ∆∞·ªõc l∆∞·ª£ng"
        )

        with st.expander("üìä Xem chi ti·∫øt ƒë·∫ßu v√†o"):
            st.dataframe(input_data, hide_index=True)

    except Exception as e:
        st.error(f"L·ªói khi d·ª± ƒëo√°n: {str(e)}")